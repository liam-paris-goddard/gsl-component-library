import { r as registerInstance, a as createEvent, g as getElement, h, d as Host } from './index-CgoP35pI.js';

/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */
var _20$1 = {
  "elem": "svg",
  "attrs": {
    "xmlns": "http://www.w3.org/2000/svg",
    "viewBox": "0 0 32 32",
    "fill": "currentColor",
    "width": 20,
    "height": 20
  },
  "content": [{
    "elem": "path",
    "attrs": {
      "d": "M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z"
    }
  }],
  "name": "close",
  "size": 20
};

/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */
var _20 = {
  "elem": "svg",
  "attrs": {
    "xmlns": "http://www.w3.org/2000/svg",
    "viewBox": "0 0 20 20",
    "fill": "currentColor",
    "width": 20,
    "height": 20
  },
  "content": [{
    "elem": "path",
    "attrs": {
      "d": "M2 14.8H18V16H2zM2 11.2H18V12.399999999999999H2zM2 7.6H18V8.799999999999999H2zM2 4H18V5.2H2z"
    }
  }],
  "name": "menu",
  "size": 20
};

function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o,
    r,
    i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

var _excluded = ["width", "height", "viewBox"],
  _excluded2 = ["tabindex"];
/**
 * Copyright IBM Corp. 2018, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var defaultAttributes = {
  // Reference:
  // https://github.com/IBM/carbon-components-react/issues/1392
  // https://github.com/PolymerElements/iron-iconset-svg/pull/47
  // `focusable` is a string attribute which is why we do not use a boolean here
  focusable: 'false',
  preserveAspectRatio: 'xMidYMid meet'
};

/**
 * Get supplementary HTML attributes for a given <svg> element based on existing
 * attributes.
 */
function getAttributes() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    width = _ref.width,
    height = _ref.height,
    _ref$viewBox = _ref.viewBox,
    viewBox = _ref$viewBox === void 0 ? "0 0 ".concat(width, " ").concat(height) : _ref$viewBox,
    attributes = _objectWithoutProperties(_ref, _excluded);
  var tabindex = attributes.tabindex,
    rest = _objectWithoutProperties(attributes, _excluded2);
  var iconAttributes = _objectSpread2(_objectSpread2(_objectSpread2({}, defaultAttributes), rest), {}, {
    width: width,
    height: height,
    viewBox: viewBox
  });

  // TODO: attributes.title assumes that the consumer will implement <title> and
  // correctly set `aria-labelledby`.
  if (iconAttributes['aria-label'] || iconAttributes['aria-labelledby'] || iconAttributes.title) {
    iconAttributes.role = 'img';

    // Reference:
    // https://allyjs.io/tutorials/focusing-in-svg.html
    if (tabindex !== undefined && tabindex !== null) {
      iconAttributes.focusable = 'true';
      iconAttributes.tabindex = tabindex;
    }
  } else {
    iconAttributes['aria-hidden'] = true;
  }
  return iconAttributes;
}

/**
 * Copyright IBM Corp. 2018, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Convert an icon descriptor to a String
 */
function toString(descriptor) {
  var _descriptor$elem = descriptor.elem,
    elem = _descriptor$elem === void 0 ? 'svg' : _descriptor$elem,
    _descriptor$attrs = descriptor.attrs,
    attrs = _descriptor$attrs === void 0 ? {} : _descriptor$attrs,
    _descriptor$content = descriptor.content,
    content = _descriptor$content === void 0 ? [] : _descriptor$content;
  var children = content.map(toString).join('');
  if (elem !== 'svg') {
    return "<".concat(elem, " ").concat(formatAttributes(attrs), ">").concat(children, "</").concat(elem, ">");
  }
  return "<".concat(elem, " ").concat(formatAttributes(getAttributes(attrs)), ">").concat(children, "</").concat(elem, ">");
}
function formatAttributes(attrs) {
  return Object.keys(attrs).reduce(function (acc, key, index) {
    var attribute = "".concat(key, "=\"").concat(attrs[key], "\"");
    if (index === 0) {
      return attribute;
    }
    return acc + ' ' + attribute;
  }, '');
}

/**
 * Copyright IBM Corp. 2018, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Convert an icon descriptor to a DOM node.
 */
function toSVG(descriptor) {
  var _descriptor$elem = descriptor.elem,
    elem = _descriptor$elem === void 0 ? 'svg' : _descriptor$elem,
    _descriptor$attrs = descriptor.attrs,
    attrs = _descriptor$attrs === void 0 ? {} : _descriptor$attrs,
    _descriptor$content = descriptor.content,
    content = _descriptor$content === void 0 ? [] : _descriptor$content;
  var node = document.createElementNS('http://www.w3.org/2000/svg', elem);
  var attributes = elem !== 'svg' ? attrs : getAttributes(attrs);
  Object.keys(attributes).forEach(function (key) {
    node.setAttribute(key, attrs[key]);
  });
  for (var i = 0; i < content.length; i++) {
    node.appendChild(toSVG(content[i]));
  }
  return node;
}

const gslHeaderCss = "@charset \"UTF-8\";:host{display:block;font-family:var(--gsl-font-heading)}.gsl-header{display:flex;align-items:center;justify-content:space-between;background-color:var(--gsl-header-background, #002855);color:var(--gsl-header-text-color, #f4f4f4);font-family:var(--gsl-font-heading, \"Ramona\", sans-serif);z-index:var(--gsl-header-z-index);padding:0.625rem 1rem;position:relative;transition:border-bottom-left-radius 0.3s ease}:host(.nav-open) .gsl-header{border-bottom-left-radius:0}.gsl-header__left{display:flex;align-items:center;gap:1rem}.gsl-header__menu-button{background:none;border:none;cursor:pointer;padding:0;height:2rem;width:2rem;color:var(--gsl-header-icon-color, #f4f4f4);display:inline-flex;align-items:center;justify-content:center}.gsl-header__menu-button:focus-visible{outline:2px solid var(--gsl-focus, #0f62fe);outline-offset:2px}.gsl-header__menu-button:hover,.gsl-header__menu-button:focus-visible{background-color:var(--gsl-header-button-hover-bg, #e0e0e0);border-radius:4px;color:var(--gsl-header-icon-color-hover, #002855)}.gsl-header__menu-button:focus-visible{outline:2px solid var(--gsl-focus, #0f62fe);outline-offset:2px}.gsl-header__icon{display:flex;align-items:center;justify-content:center}.gsl-header__logo{font-size:1rem;font-weight:600;text-decoration:none;color:inherit}.gsl-header__logo img{width:8rem}.gsl-header__center{flex:1;display:flex;justify-content:center;align-items:center}.gsl-header__right{display:flex;align-items:center;gap:0.5rem}@media (max-width: 767px){.gsl-header__right{display:none;}}";

const GslHeader = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.toggleSideNav = createEvent(this, "gsl:toggle-side-nav", 7);
    }
    /** Link the logo should direct to */
    logoHref = '/';
    /** path to logo asset */
    logoSrc;
    /** Page title */
    pageTitle;
    /** The id of the side–nav element so aria‑controls can target it */
    sideNavId = 'gsl-side-nav';
    /** Optional alt text for the default logo */
    logoAlt = 'Goddard School logo';
    /** controlled by the shell component, expanded state of side nav, to set the state of the toggle button */
    navExpanded = false;
    /** Aria label when nav is open */
    buttonLabelActive = 'Close navigation menu';
    /** Aria label when nav is closed */
    buttonLabelInactive = 'Open navigation menu';
    /** True when a custom <slot name="logo"> is provided */
    hasLogoSlot = false;
    /** Emitted when menuButton is toggled */
    toggleSideNav;
    get el() { return getElement(this); }
    menuIconString = toString({
        ..._20,
        attrs: getAttributes(_20.attrs),
    });
    closeIconString = toString({
        ..._20$1,
        attrs: getAttributes(_20$1.attrs),
    });
    // Should this be emitting nothing, and the shell will update it just with whatever the opposite is?
    toggleNav = () => {
        this.toggleSideNav.emit(this.navExpanded);
    };
    render() {
        const hostCls = { 'nav-open': this.navExpanded };
        return (h(Host, { key: '7b13038f151b32ba35330cbdc0aa190bd3b0fca1', class: hostCls }, h("header", { key: 'fe87cc1ee7f609d39ca4ae39365243e0f77ce74f', class: "gsl-header", role: "banner" }, h("div", { key: 'b694739a2e9a22c5397bda8d6e8e707dd3b4f968', class: "gsl-header__left" }, h("button", { key: 'e76a09774b101ab3fbf56c05e9b790803ce909d2', type: "button", class: "gsl-header__menu-button", "aria-label": this.navExpanded ? this.buttonLabelActive : this.buttonLabelInactive, "aria-expanded": this.navExpanded ? 'true' : 'false', "aria-controls": this.sideNavId, onClick: this.toggleNav }, h("span", { key: '763b748dd6bb8e81935540b31d4a277d69b457ae', class: "gsl-header__icon", "aria-hidden": "true", innerHTML: this.navExpanded ? this.closeIconString : this.menuIconString })), this.hasLogoSlot ? (h("slot", { name: "logo", onSlotchange: e => (this.hasLogoSlot = e.target.assignedNodes().length > 0) })) : (h("a", { href: this.logoHref, class: "gsl-header__logo" }, h("img", { src: this.logoSrc, alt: this.logoAlt }))), this.pageTitle && h("h2", { key: '1878129413a12b30621189d508fb8a09acefd4fc', class: "gsl-header__page-title" }, this.pageTitle)), h("div", { key: 'c97acb1c6df7507a884734b08f661e9a8ca2ece0', class: "gsl-header__center" }, h("slot", { key: '6f082b73c74308c5d1cf3a9e5816ea3b976f13c5', name: "center" })), h("div", { key: '788d467d86b6ca7efd385d7f16b173f2735276b9', class: "gsl-header__right" }, h("slot", { key: '8c1ccb7485120c388345dc77bad033401b429c6a', name: "right-actions" })))));
    }
};
GslHeader.style = gslHeaderCss;

export { GslHeader as gsl_header };
//# sourceMappingURL=gsl-header.entry.esm.js.map

//# sourceMappingURL=gsl-header.entry.js.map